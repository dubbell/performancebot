
# BENCHMARK CONTROLLER ------------------------------------

# controller deployment:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: benchmark-controller
  labels:
    app: benchmark-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: benchmark-controller
  template:
    metadata:
      labels:
        app: benchmark-controller
    spec:
      serviceAccountName: perfbot-sa
      containers:
        - name: benchmark-controller
          image: docker.io/linulun/benchmark-controller:latest
          ports:
            - containerPort: 1337


---

# controller service:
apiVersion: v1
kind: Service
metadata:
  name: benchmark-controller-svc
spec:
  type: LoadBalancer
  selector:
    app: benchmark-controller
  ports:
    - protocol: TCP
      port: 80
      targetPort: 1337

---

# controller ingress:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: benchmark-controller-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: benchmark-controller-svc
                port:
                  number: 80

---



# BENCHMARK WORKER ----------------------

# worker deployment:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: benchmark-worker
  labels:
    app: benchmark-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: benchmark-worker
  template:
    metadata:
      labels:
        app: benchmark-worker
    spec:
      serviceAccountName: perfbot-sa
      containers:
        - name: benchmark-worker
          image: docker.io/linulun/benchmark-worker:latest
          ports:
            - containerPort: 8081

---

# worker service:
apiVersion: v1
kind: Service
metadata:
  name: benchmark-worker-svc
spec:
  type: LoadBalancer
  selector:
    app: benchmark-worker
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8081

---



# SERVICE ACCOUNT ----------------------------------

# service account:
apiVersion: v1
kind: ServiceAccount
metadata:
  name: perfbot-sa
  namespace: default

---

# clusterrole for perfbot-sa (gives perms):
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: perfbot-sa-role
  namespace: default
rules:
  - apiGroups:
      - ""
      - apps
      - autoscaling
      - batch
      - extensions
      - policy
      - rbac.authorization.k8s.io
    resources:
      - pods
      - componentstatuses
      - configmaps
      - daemonsets
      - deployments
      - events
      - endpoints
      - horizontalpodautoscalers
      - ingress
      - jobs
      - limitranges
      - namespaces
      - nodes
      - pods
      - persistentvolumes
      - persistentvolumeclaims
      - resourcequotas
      - replicasets
      - replicationcontrollers
      - serviceaccounts
      - services
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---

# bind role to perfbot service account:
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: perfbot-role-binding
subjects:
  - namespace: default
    kind: ServiceAccount
    name: perfbot-sa
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: perfbot-sa-role